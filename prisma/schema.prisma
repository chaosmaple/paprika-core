datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    // Corresponds to the cargo alias created earlier
    provider = "cargo prisma"
    // The location to generate the client. Is relative to the position of the schema
    output   = "../ws-db/src/db.rs"
}

enum WSCardType {
    Character
    Climax
    Event
}

enum WSCardSide {
    W
    S
}

enum WSCardColor {
    Red
    Blue
    Green
    Yellow
    Purple
    Colorless
}

enum WSCardTrigger {
    None
    Soul
    DoubleSoul
    Pool
    Comeback
    Return
    Draw
    Treasure
    Shot
    Gate
    Choice
    Standby
}

model WSCard {
    id    Int @id @default(autoincrement())
    image String @db.VarChar(50)
    card_name String @db.VarChar(30)
    card_no String @db.VarChar(20)
    product WSProduct @relation(fields: [product_id], references: [id])
    product_id Int
    expansion WSExpansion @relation(fields: [expansion_id], references: [expansion_id])
    expansion_id String
    rarity String @db.VarChar(10)
    side WSCardSide
    card_type WSCardType
    color WSCardColor
    level Int @db.SmallInt
    cost Int @db.SmallInt
    power Int
    soul Int @db.SmallInt
    trigger WSCardTrigger
    traits WSTraitsOnCards[]
    text String @default("-") @db.VarChar(200)
    flavor String? @default("-") @db.VarChar(100)
    illustrator String? @default("-") @db.VarChar(20)
}

model WSProduct {
    id    Int @id @default(autoincrement())
    product String @unique
    card_list WSCard[]
}

model WSExpansion {
    expansion_id String @id
    expansion_name String @db.VarChar(50)
    card_list WSCard[]
}

model WSTrait {
    id    Int @id @default(autoincrement())
    trait_name String @db.VarChar(20)
    card_list WSTraitsOnCards[]
}

model WSTraitsOnCards {
    trait_id Int
    card_id Int
    trait WSTrait @relation(fields: [trait_id], references: [id])
    card WSCard @relation(fields: [card_id], references: [id])
    @@id([trait_id, card_id])
}